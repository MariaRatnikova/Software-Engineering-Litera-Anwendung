<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>litera.catalog</groupId>
  <artifactId>buchkatalog</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>

  <name>B체cherkatalog-Anwendung</name>
  <description>Litera Book Catalogue: Desktop-Anwendung zur Buchsuche und -bewertung</description>
  <url>https://www.litera.de</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <developers>
    <developer><name>Ranim Khallouf</name></developer>
    <developer><name>Rama Alshaer</name></developer>
    <developer><name>Marija Ratnikova</name></developer>
    <developer><name>Lena Heberlein</name></developer>
  </developers>

  <dependencies>
    <!-- JSON-Verarbeitung -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.15.2</version>
    </dependency>

    <!-- JUnit 5 for tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.10.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.10.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- 1) Compiler Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>

      <!-- 2) Surefire for running tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M7</version>
        <configuration>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>

      <!-- 3) Shade Plugin: erstellt ein Fat-JAR mit allen Abh채ngigkeiten -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.4.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <createDependencyReducedPom>true</createDependencyReducedPom>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>all</shadedClassifierName>
              <transformers>
                <!-- Hauptklasse ins Manifest schreiben -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>ApplicationWindow</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- 4) JAR Plugin: definiert Main-Class, falls kein Shade-JAR gew체nscht -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>ApplicationWindow</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- 5) ProGuard Plugin: obfuskiert das generierte Shade-JAR -->
      <plugin>
        <groupId>com.github.wvengen</groupId>
        <artifactId>proguard-maven-plugin</artifactId>
        <version>2.4.0</version>
        <executions>
          <execution>
            <id>obfuscate</id>
            <phase>package</phase>
            <goals>
              <goal>proguard</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- Nimm das Shade-JAR als Input -->
          <injars>
            <injar>${project.build.directory}/${project.build.finalName}-all.jar</injar>
          </injars>
          <!-- Schreibe das obfuszierte JAR ins Target-Verzeichnis -->
          <outjars>
            <outjar>${project.build.directory}/${project.build.finalName}-all-obf.jar</outjar>
          </outjars>
          <!-- Java-Laufzeit-Bibliothek (Java 11+) -->
          <libraryjars>
            <libraryjar>${java.home}/lib/jrt-fs.jar</libraryjar>
          </libraryjars>
          <options>
            <!-- Behalte Main-Klasse und Einstiegspunkt -->
            <option>-keep public class ApplicationWindow { public static void main(java.lang.String[]); }</option>
            <!-- Keine Warnungen anzeigen -->
            <option>-dontwarn</option>
            <!-- Keine Optimierungen (nur Obfuskation) -->
            <option>-dontoptimize</option>
            <!-- Erzeuge Mapping-Datei f체r Debugging -->
            <option>-printmapping ${project.build.directory}/mapping.txt</option>
          </options>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
