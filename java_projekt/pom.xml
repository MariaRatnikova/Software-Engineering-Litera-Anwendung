<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>litera.catalog</groupId>
  <artifactId>buchkatalog</artifactId>
  <version>2.0.0</version>
  <packaging>jar</packaging>

  <properties>
    <!-- Kompilierung für Java 11 -->
    <release>11</release>
    <!-- Versionen der Bibliotheken -->
    <jackson.version>2.15.2</jackson.version>
    <junit.version>5.10.0</junit.version>
    <proguard.version>7.4.2</proguard.version>
    <!-- Absoluter Pfad zum jmods-Ordner der JDK 17 (Homebrew) -->
    <jdk.modules>/opt/homebrew/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home/jmods</jdk.modules>
  </properties>

  <dependencies>
    <!-- Jackson: nötig für JSON -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <!-- JUnit 5 für Tests -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>

      <!-- 1. Kompilierung für Java 11 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>${release}</release>
        </configuration>
      </plugin>

      <!-- 2. Tests (mit JUnit 5) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>

      <!-- 3. Shade: Erzeugt ein einzelnes Fat-Jar einschließlich aller Abhängigkeiten (Jackson usw.) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.4.1</version>
        <executions>
          <execution>
            <id>make-fat</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <!-- Das endgültige Artefakt heißt buchkatalog-2.0.0.jar (ohne classifier) -->
              <shadedArtifactAttached>false</shadedArtifactAttached>
              <createDependencyReducedPom>false</createDependencyReducedPom>

              <!-- Schreibt Main-Class in das Manifest -->
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <!-- Ersetze durch den vollqualifizierten Namen deiner Klasse mit main(...) -->
                  <mainClass>ApplicationWindow</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- 4. ProGuard: Obfuskiert das Fat-Jar (buchkatalog-2.0.0.jar) → buchkatalog-2.0.0-obf.jar -->
      <plugin>
        <groupId>com.github.wvengen</groupId>
        <artifactId>proguard-maven-plugin</artifactId>
        <version>2.7.0</version>
        <dependencies>
          <dependency>
            <groupId>com.guardsquare</groupId>
            <artifactId>proguard-base</artifactId>
            <version>${proguard.version}</version>
            <scope>runtime</scope>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>obfuscate</id>
            <!-- Phase verify stellt sicher, dass das Fat-Jar bereits vorhanden ist (nach package) -->
            <phase>verify</phase>
            <goals>
              <goal>proguard</goal>
            </goals>
            <configuration>
              <proguardVersion>${proguard.version}</proguardVersion>

              <!-- Basisverzeichnis (target/ für Eingabe- und Ausgabe-Jar) -->
              <basedir>${project.build.directory}</basedir>

              <!-- injar: das Fat-Jar, das Shade erzeugt hat, liegt unter target/buchkatalog-2.0.0.jar -->
              <injar>${project.build.finalName}.jar</injar>

              <!-- outjar: erstellt target/buchkatalog-2.0.0-obf.jar -->
              <outjar>${project.build.finalName}-obf.jar</outjar>

              <!-- Hängt das obfuskierte Jar an die Artefakte an (wird trotzdem in target/ liegen) -->
              <attach>true</attach>

              <!-- Standard-Java-Bibliothek (jmods), damit ProGuard alle JDK-Klassen findet -->
              <libraryjars>
                <libraryjar>${jdk.modules}</libraryjar>
              </libraryjars>

              <options>
                <!-- Punkt des Programmeinstiegs bleibt unverändert -->
                <option>-keep public class ApplicationWindow { public static void main(java.lang.String[]); }</option>
                <!-- Alle Jackson-Klassen beibehalten, sonst bricht JSON-Teil -->
                <option>-keep class com.fasterxml.jackson.** { *; }</option>

                <!-- Metadaten, Annotationen und innere Klassen behalten -->
                <option>-keepattributes *Annotation*</option>
                <option>-keepattributes Signature</option>
                <option>-keepattributes InnerClasses</option>
                <option>-keepattributes EnclosingMethod</option>

                <!-- Keine Shrinking- oder Optimierungs-Schritte, damit Stack-Map-Frames unter Java 11 intakt bleiben -->
                <option>-dontshrink</option>
                <option>-dontoptimize</option>
                <option>-dontpreverify</option>

                <!-- Ziel-Bytecodeversion: Java 11 -->
                <option>-target 11</option>

                <!-- Alle Warnungen ignorieren -->
                <option>-dontwarn</option>
              </options>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>